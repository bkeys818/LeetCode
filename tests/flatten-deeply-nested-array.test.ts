import {
    flattenDeeplyNestedArray1 as solution1,
    flattenDeeplyNestedArray2 as solution2,
    type MultiDimensionalArray,
} from '@/flatten-deeply-nested-array'

const longArr: MultiDimensionalArray = [
    [2],
    [1],
    [1],
    [0],
    [1],
    [0],
    [0],
    [0],
    [1],
    [2],
    [3],
    [3],
    [2],
    [4],
    [0],
    [3],
    [1],
    [4],
    [1],
    [3],
    [3],
    [3],
    [4],
    [4],
    [4],
    [0],
    [1],
    [2],
    [4],
    [1],
    [2],
    [3],
    [1],
    [1],
    [3],
    [0],
    [4],
    [4],
    [1],
    [3],
    [2],
    [3],
    [1],
    [4],
    [2],
    [3],
    [4],
    [0],
    [3],
    [1],
    [4],
    [0],
    [0],
    [1],
    [2],
    [1],
    [4],
    [4],
    [2],
    [3],
    [4],
    [2],
    [4],
    [1],
    [0],
    [2],
    [2],
    [3],
    [2],
    [4],
    [1],
    [2],
    [1],
    [1],
    [0],
    [2],
    [3],
    [0],
    [1],
    [0],
    [0],
    [2],
    [3],
    [0],
    [1],
    [4],
    [2],
    [4],
    [1],
    [1],
    [4],
    [2],
    [4],
    [3],
    [0],
    [3],
    [4],
    [3],
    [3],
    [1],
    [1],
    [0],
    [3],
    [4],
    [1],
    [0],
    [1],
    [4],
    [0],
    [2],
    [4],
    [4],
    [2],
    [0],
    [0],
    [4],
    [2],
    [3],
    [1],
    [1],
    [2],
    [0],
    [1],
    [4],
    [0],
    [1],
    [4],
    [3],
    [3],
    [4],
    [1],
    [0],
    [1],
    [0],
    [3],
    [1],
    [2],
    [2],
    [3],
    [3],
    [0],
    [4],
    [3],
    [2],
    [2],
    [4],
    [3],
    [2],
    [4],
    [1],
    [1],
    [0],
    [4],
    [1],
    [3],
    [0],
    [2],
    [3],
    [4],
    [2],
    [1],
    [3],
    [4],
    [4],
    [3],
    [3],
    [1],
    [0],
    [0],
    [4],
    [4],
    [2],
    [2],
    [4],
    [4],
    [3],
    [0],
    [2],
    [2],
    [2],
    [1],
    [4],
    [3],
    [3],
    [0],
    [3],
    [1],
    [3],
    [4],
    [0],
    [3],
    [3],
    [0],
    [4],
    [2],
    [3],
    [2],
    [4],
    [0],
    [3],
    [2],
    [2],
    [2],
    [2],
    [0],
    [1],
    [1],
    [0],
    [4],
    [3],
    [4],
    [0],
    [1],
    [4],
    [3],
    [2],
    [1],
    [3],
    [2],
    [0],
    [1],
    [0],
    [1],
    [2],
    [4],
    [0],
    [1],
    [0],
    [1],
    [1],
    [2],
    [3],
    [4],
    [1],
    [3],
    [1],
    [4],
    [2],
    [1],
    [2],
    [1],
    [1],
    [2],
    [1],
    [0],
    [0],
    [4],
    [2],
    [2],
    [3],
    [0],
    [2],
    [0],
    [3],
    [2],
    [4],
    [0],
    [2],
    [0],
    [4],
    [1],
    [3],
    [2],
    [4],
    [1],
    [2],
    [3],
    [0],
    [4],
    [0],
    [1],
    [2],
    [0],
    [0],
    [0],
    [1],
    [0],
    [1],
    [3],
    [3],
    [1],
    [3],
    [0],
    [3],
    [0],
    [4],
    [1],
    [2],
    [0],
    [0],
    [3],
    [2],
    [2],
    [0],
    [4],
    [2],
    [2],
    [0],
    [3],
    [3],
    [0],
    [4],
    [4],
    [1],
    [0],
    [2],
    [3],
    [2],
    [0],
    [1],
    [2],
    [1],
    [3],
    [0],
    [4],
    [2],
    [2],
    [3],
    [1],
    [1],
    [2],
    [3],
    [0],
    [4],
    [1],
    [4],
    [3],
    [0],
    [1],
    [3],
    [2],
    [4],
    [0],
    [3],
    [0],
    [3],
    [2],
    [2],
    [0],
    [2],
    [3],
    [0],
    [2],
    [4],
    [3],
    [4],
    [3],
    [2],
    [0],
    [2],
    [0],
    [3],
    [2],
    [1],
    [4],
    [1],
    [0],
    [4],
    [0],
    [2],
    [3],
    [1],
    [3],
    [0],
    [1],
    [0],
    [2],
    [0],
    [0],
    [0],
    [3],
    [2],
    [0],
    [4],
    [0],
    [1],
    [0],
    [1],
    [1],
    [0],
    [2],
    [1],
    [3],
    [3],
    [1],
    [0],
    [1],
    [4],
    [1],
    [1],
    [3],
    [1],
    [1],
    [4],
    [1],
    [1],
    [1],
    [0],
    [3],
    [3],
    [0],
    [0],
    [2],
    [2],
    [1],
    [3],
    [3],
    [4],
    [4],
    [4],
    [3],
    [1],
    [0],
    [0],
    [1],
    [0],
    [4],
    [3],
    [1],
    [1],
    [2],
    [0],
    [3],
    [2],
    [2],
    [4],
    [3],
    [1],
    [3],
    [4],
    [2],
    [1],
    [3],
    [1],
    [2],
    [3],
    [3],
    [0],
    [0],
    [0],
    [4],
    [3],
    [1],
    [0],
    [3],
    [0],
    [1],
    [4],
    [4],
    [0],
    [2],
    [3],
    [1],
    [4],
    [4],
    [0],
    [2],
    [0],
    [2],
    [4],
    [0],
    [1],
    [4],
    [2],
    [2],
    [0],
    [1],
    [0],
    [0],
    [2],
    [3],
    [3],
    [2],
    [0],
    [3],
    [3],
    [3],
    [3],
    [2],
    [0],
    [2],
    [1],
    [2],
    [1],
    [2],
    [3],
    [2],
    [3],
    [3],
    [0],
    [3],
    [1],
    [0],
    [3],
    [4],
    [2],
    [1],
    [3],
    [4],
    [3],
    [4],
    [4],
    [3],
    [2],
    [2],
    [2],
    [0],
    [2],
    [4],
    [4],
    [4],
    [3],
    [4],
    [4],
    [3],
    [3],
    [1],
    [3],
    [3],
    [3],
    [4],
    [3],
    [1],
    [4],
    [4],
    [2],
    [3],
    [3],
    [4],
    [4],
    [2],
    [0],
    [0],
    [0],
    [4],
    [4],
    [3],
    [1],
    [3],
    [1],
    [1],
    [4],
    [0],
    [0],
    [4],
    [1],
    [1],
    [4],
    [3],
    [2],
    [1],
    [1],
    [1],
    [3],
    [3],
    [0],
    [1],
    [3],
    [4],
    [4],
    [2],
    [2],
    [1],
    [2],
    [3],
    [3],
    [0],
    [4],
    [2],
    [0],
    [0],
    [3],
    [4],
    [0],
    [3],
    [3],
    [1],
    [4],
    [4],
    [0],
    [4],
    [2],
    [0],
    [1],
    [1],
    [0],
    [2],
    [4],
    [2],
    [0],
    [0],
    [2],
    [2],
    [4],
    [0],
    [1],
    [4],
    [1],
    [1],
    [0],
    [4],
    [1],
    [1],
    [2],
    [0],
    [1],
    [2],
    [1],
    [3],
    [2],
    [1],
    [0],
    [4],
    [3],
    [4],
    [2],
    [3],
    [1],
    [1],
    [3],
    [0],
    [0],
    [4],
    [2],
    [2],
    [4],
    [3],
    [3],
    [2],
    [4],
    [1],
    [1],
    [1],
    [4],
    [4],
    [3],
    [1],
    [4],
    [0],
    [2],
    [2],
    [4],
    [4],
    [2],
    [1],
    [2],
    [4],
    [1],
    [3],
    [2],
    [4],
    [3],
    [4],
    [4],
    [0],
    [4],
    [1],
    [3],
    [4],
    [1],
    [2],
    [4],
    [3],
    [0],
    [1],
    [4],
    [0],
    [0],
    [1],
    [0],
    [2],
    [0],
    [2],
    [1],
    [0],
    [2],
    [1],
    [3],
    [0],
    [4],
    [0],
    [3],
    [0],
    [0],
    [0],
    [3],
    [1],
    [4],
    [2],
    [1],
    [2],
    [2],
    [3],
    [1],
    [3],
    [2],
    [0],
    [1],
    [4],
    [0],
    [2],
    [1],
    [1],
    [2],
    [1],
    [1],
    [2],
    [3],
    [4],
    [2],
    [4],
    [2],
    [1],
    [3],
    [4],
    [1],
    [0],
    [0],
    [0],
    [4],
    [1],
    [4],
    [1],
    [1],
    [0],
    [2],
    [4],
    [2],
    [2],
    [2],
]

describe('Flatten Deeply Nested Array', () => {
    const testData: [number, MultiDimensionalArray, number][] = [
        [1, [1, 2, 3, [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]], 0],
        [2, [1, 2, 3, [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]], 1],
        [3, [1, 2, 3, [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]], 2],
        [4, longArr, 1000],
    ]
    describe('Solution 1: Recursive approach', () => {
        test.each(testData)('case %i', (_, ...args) => {
            expect(solution1(...args))
        })
    })
    describe('Solution 1: Iterative Stack', () => {
        test.each(testData)('case %i', (_, ...args) => {
            expect(solution2(...args))
        })
    })
})
